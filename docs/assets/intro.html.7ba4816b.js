import{c as a,a as n,F as i,e as r,d as e,o as t}from"./app.77b6466b.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const d={},h=r('<h1 id="五分钟快速了解" tabindex="-1"><a class="header-anchor" href="#五分钟快速了解" aria-hidden="true">#</a> 五分钟快速了解</h1><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果你正在做后台框架相关的调研或选型，相信这篇介绍能帮助你快速了解 One-step-admin 的特点，以及与传统后台框架的对比。</p></div><h2 id="高效的交互方式" tabindex="-1"><a class="header-anchor" href="#高效的交互方式" aria-hidden="true">#</a> 高效的交互方式</h2><p>摆脱传统后台框架路由跳转的交互，将每个模块以<strong>窗口</strong>的形式展示在同一个界面中，让使用人员可以做到跨模块的多线操作。</p>',4),l=["src"],c=n("h2",{id:"窗口最大化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#窗口最大化","aria-hidden":"true"},"#"),e(" 窗口最大化")],-1),p=n("p",null,"窗口默认宽度为 800px ，可以在项目中进行调整，也可以通过最大化按钮将窗口最大化展示，以便展示更多信息。",-1),o=["src"],u=n("h2",{id:"快速定位操作窗口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#快速定位操作窗口","aria-hidden":"true"},"#"),e(" 快速定位操作窗口")],-1),m=n("p",null,"提供的预览界面可以帮助使用人员快速定位到需要操作的窗口。",-1),f=["src"],g=n("h2",{id:"专注模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#专注模式","aria-hidden":"true"},"#"),e(" 专注模式")],-1),b=n("p",null,"可勾选 2 到 4 个窗口平均分布在页面中，专注于所勾选的窗口进行操作。",-1),x=["src"],w=n("h2",{id:"窗口排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#窗口排序","aria-hidden":"true"},"#"),e(" 窗口排序")],-1),B=n("p",null,"快速调整窗口的展示顺序。",-1),F=["src"],$=r('<h2 id="继承自-fantastic-admin" tabindex="-1"><a class="header-anchor" href="#继承自-fantastic-admin" aria-hidden="true">#</a> 继承自 Fantastic-admin</h2><p>本框架继承了 Fantastic-admin 许多优秀的特性。例如同样提供了 5 款导航栏模式，3 款导航栏风格以及 6 款主题配色，导航也提供了各种展示形态的设置，显隐、标题、图标、徽标、外链等。</p><h2 id="为什么不是-fantastic-admin" tabindex="-1"><a class="header-anchor" href="#为什么不是-fantastic-admin" aria-hidden="true">#</a> 为什么不是 Fantastic-admin ？</h2><p>这里的 Fantastic-admin 代表了市面上几乎所有的传统后台框架，它们的优势在于理解成本低，每个页面的功能明确，需要做什么操作就进入不同的页面。</p><p>而劣势也是因为这种优势导致的，例如要在多个模块之间进行操作，就需要频繁切换路由，而切换路由会导致之前页面上的数据丢失，进而扩展了页面缓存和标签栏的特性，但也变相增加了开发人员的开发成本。其次现在的显示器都在往高分屏/带鱼屏发展，当页面展示内容不多的时候，界面上会显示大量的留白，造成空间浪费。</p><p>基于传统后台框架的这些痛点，One-step-admin 应运而生，它探索出了一种全新的交互方式，有效<strong>提高了使用人员的操作效率</strong>，同时也<strong>减轻了开发人员的开发成本</strong>。</p><p>以上面举例的场景，在 One-step-admin 里，因为模块都以窗口的形式在同一个界面上展示，所以就不存在切换路由，也就不存在切换路由导致页面数据丢失的场景，开发人员只需关注模块内的业务实现即可。</p>',7);var v=s(d,[["render",function(r,e){return t(),a(i,null,[h,n("p",null,[n("img",{src:r.$withBase("/intro-1.gif")},null,8,l)]),c,p,n("p",null,[n("img",{src:r.$withBase("/intro-2.gif")},null,8,o)]),u,m,n("p",null,[n("img",{src:r.$withBase("/intro-3.gif")},null,8,f)]),g,b,n("p",null,[n("img",{src:r.$withBase("/intro-4.gif")},null,8,x)]),w,B,n("p",null,[n("img",{src:r.$withBase("/intro-5.gif")},null,8,F)]),$],64)}]]);export{v as default};

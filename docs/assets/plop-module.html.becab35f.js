import{r as n,c as s,a,b as o,w as p,F as t,d as e,e as c,o as r}from"./app.d89cfde9.js";import{_ as l}from"./plugin-vue_export-helper.5a098b48.js";const i={},u={id:"标准模块",tabindex:"-1"},d=a("a",{class:"header-anchor",href:"#标准模块","aria-hidden":"true"},"#",-1),k=e(" 标准模块 "),g=e("在《"),b=e("代码文件自动生成 - module"),m=e("》里介绍了如何快速生成一个标准模块，这个标准模块是一个最基础的 CURD 模块，它包含列表页和编辑页，同时提供了搜索和删除的功能，并且同时也可以生成对应的 mock 文件，在这基础上可以更方便的进行业务扩展。"),h=c('<p>下面我就实际操作一遍，并介绍一下这个标准模块有哪些特性。</p><h1 id="用法说明" tabindex="-1"><a class="header-anchor" href="#用法说明" aria-hidden="true">#</a> 用法说明</h1><div class="language-text ext-text"><pre class="language-text"><code>? 请选择需要创建的模式： module - 创建标准窗口\n? 请输入窗口组件名称 test window\n? 请输入模块中文名称 默认模块\n? 是否生成 Mock Yes\n√  ++ \\src\\views\\windows\\TestWindow\\index.vue\n√  ++ \\src\\views\\windows\\TestWindow\\components\\DetailForm\\index.vue\n√  ++ \\src\\views\\windows\\TestWindow\\components\\FormMode\\index.vue\n√  ++ \\src\\mock\\test-window.js\n</code></pre></div><p>这里我已经通过命令在 <code>/src/views/windows/</code> 目录下创建好了一个 TestWindow 文件夹，并且也生成了 mock 数据。接下来需要去配置下导航，这样我们才可以在导航栏里访问到。</p><p>首先在 <code>/src/menu/modules/</code> 目录下新建一个 <code>test.window.js</code> 文件，并在里面复制以下代码：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;测试模块&#39;</span><span class="token punctuation">,</span>\n    windowName<span class="token operator">:</span> <span class="token string">&#39;TestWindow&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>然后到 <code>/src/menu/index.js</code> 文件里加上这个路由配置文件的引用。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> TestWindow <span class="token keyword">from</span> <span class="token string">&#39;./modules/test.window&#39;</span>\n\n<span class="token keyword">const</span> menu <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n        meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n            title<span class="token operator">:</span> <span class="token string">&#39;页面&#39;</span><span class="token punctuation">,</span>\n            icon<span class="token operator">:</span> <span class="token string">&#39;ri-pages-line&#39;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        children<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token operator">...</span>PagesExample<span class="token punctuation">,</span>\n            TestWindow\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br></div></div><p>这时候就可以通过导航栏访问到我们的窗口了，我们的一个演示模块也就初步创建好了。</p>',9),w=["src"],v=c('<h2 id="特性介绍" tabindex="-1"><a class="header-anchor" href="#特性介绍" aria-hidden="true">#</a> 特性介绍</h2><p>功能部分的介绍主要还是要看代码，先从列表页 <code>index.vue</code> 开始。</p><p>最先看到的是这句文件导入代码，因为几乎每个列表页都需要翻页功能，所以把翻页相关的东西都存放在 <code>/src/util/pagination.js</code> 方便复用。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> usePagination <span class="token keyword">from</span> <span class="token string">&#39;@/util/pagination.js&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> pagination<span class="token punctuation">,</span> getParams<span class="token punctuation">,</span> onSizeChange<span class="token punctuation">,</span> onCurrentChange<span class="token punctuation">,</span> onSortChange <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">usePagination</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>接着在 <code>data</code> 里存放的是标准模块提供的一些配置项和必要数据参数字段。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token doc-comment comment">/**\n     * 详情展示模式\n     * dialog 对话框\n     * drawer 抽屉\n     */</span>\n    formMode<span class="token operator">:</span> <span class="token string">&#39;dialog&#39;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 详情</span>\n    formModeProps<span class="token operator">:</span> <span class="token punctuation">{</span>\n        visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        id<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 搜索</span>\n    search<span class="token operator">:</span> <span class="token punctuation">{</span>\n        account<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n        mobile<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n        sex<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    searchMore<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token comment">// 批量操作</span>\n    batch<span class="token operator">:</span> <span class="token punctuation">{</span>\n        enable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        selectionDataList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 列表数据</span>\n    dataList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br></div></div><p>标准模块提供了 2 种详情展示模式，默认是弹窗的方式，你可以修改 <code>formMode: &#39;drawer&#39;</code> 开启详情抽屉模式，保存后效果如下：</p>',7),f=["src"],x=c("<p>再往下就是需要你修改或编写业务代码的部分，这里就不继续展开了。</p><p>详情页的代码就不多介绍了，相对比较简单，可自行阅读理解。其中表单部分单独封装成组件存放在 <code>/src/views/windows/[模块文件夹]/components/DetailForm/index.vue</code> 里了，同样你在 <code>components/</code> 文件夹下还能看到另外一个 <code>FormMode</code> 的文件夹，这样的用意是让表单可以复用，<strong>可以通过路由弹窗或抽屉的形式打开详情页</strong>。</p><p>可能有人会有疑问，为什么不在生成文件的时候直接让我选择用哪种形式，这样生成出来就是哪种，而是在生成好的代码文件里再进行配置？</p><p>这样设计的目的主要有三点：</p><ol><li><strong>合理使用</strong>。关于表单具体使用哪种展示模式比较好，我们的建议是，当表单与当前列表页关联性较强，内容少则使用弹窗，内容多则使用抽屉；而当表单与当前列表页关联性较弱，且内容多，可以使用新建窗口的形式，让新窗口进行承载。</li><li><strong>方便后期维护</strong>。考虑到需求会变，可能一开始是一个很简单的表单，后期需求一点点增加，变成了一个庞大的表单，这时候就要从弹窗改成抽屉的形式，反之也可能是从抽屉改成弹窗的形式，处理起来都很麻烦。所以方便后期维护，这部分是有意而为之，做成了 2 种形式共存，通过配置可一键切换。</li><li><strong>跨窗口的组件调用</strong>。第一点里有提到，如果既不想使用弹窗，也不想使用抽屉，你还可以使用新窗口的形式进行处理，这时候由于表单部分已抽象成组件，所以即便是在新窗口里，也可以直接调用该组件，从而无需编写重复代码。</li></ol><hr><p>当然标准模块也只是框架提供的一个标准，你可以沿用，也可以根据自己的需求指定一套标准，毕竟最终目的都是提高开发效率，同时也确保多人协作开发的时候有个统一标准，不会出现每个人做出来的模块风格都不一样。</p>",7);var j=l(i,[["render",function(e,c){const l=n("Badge"),i=n("RouterLink");return r(),s(t,null,[a("h1",u,[d,k,o(l,{type:"tip",text:"专业版",vertical:"top"})]),a("p",null,[g,o(i,{to:"/guide/plop.html#module"},{default:p((()=>[b])),_:1}),m]),h,a("p",null,[a("img",{src:e.$withBase("/module1.gif")},null,8,w)]),v,a("p",null,[a("img",{src:e.$withBase("/module2.gif")},null,8,f)]),x],64)}]]);export{j as default};
